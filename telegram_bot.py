import json
import os
import logging
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "7836181923:AAHjGUphNj9m-yX2OmRlI1uOFSEkSFZyISo"

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
LINKS_FILE = "links.json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ JSON, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists(LINKS_FILE):
    with open(LINKS_FILE, "w") as f:
        json.dump({}, f)
    logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª links.json")

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_main_keyboard():
    keyboard = [
        ["üòÅ –ü–û–î–î–ï–†–ñ–ö–ê"],
        ["üë®‚Äçüíª –î–ê–õ–¨–®–ï"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥–º–µ–Ω—é "–î–ê–õ–¨–®–ï"
def get_cheats_keyboard():
    keyboard = [
        ["–∞–Ω—Å–æ—Ñ—Ç", "—Å–æ—Ñ—Ç"],
        ["–Ω–∞–∑–∞–¥"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥–º–µ–Ω—é "—Å–æ—Ñ—Ç"
def get_software_keyboard():
    keyboard = [
        ["Minecraft java", "Minecraft bedrock"],
        ["–Ω–∞–∑–∞–¥"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥–º–µ–Ω—é "–∞–Ω—Å–æ—Ñ—Ç"
def get_unsoft_keyboard():
    keyboard = [
        ["—Ä–µ—Å—É—Ä—Å –ø–∞–∫–∏"],
        ["–Ω–∞–∑–∞–¥"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥–º–µ–Ω—é "—Ä–µ—Å—É—Ä—Å –ø–∞–∫–∏"
def get_resource_packs_keyboard():
    keyboard = [
        ["Imba RP"],
        ["–Ω–∞–∑–∞–¥"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥–º–µ–Ω—é "Minecraft java"
def get_minecraft_java_keyboard():
    keyboard = [
        ["—á–∏—Ç"],
        ["–Ω–∞–∑–∞–¥"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥–º–µ–Ω—é "—á–∏—Ç"
def get_cheat_version_keyboard():
    keyboard = [
        ["1.16.5"],
        ["–Ω–∞–∑–∞–¥"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥–º–µ–Ω—é "1.16.5"
def get_cheat_selection_keyboard():
    keyboard = [
        ["Wexside", "britvafarm", "Nursultan crack"],
        ["dimasikclient", "Delta Crack", "Haruka(loader)"],
        ["rocstar free", "–Ω–∞–∑–∞–¥"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context):
    logger.info("–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.message.from_user.username)
    context.user_data['menu_state'] = 'main'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! —è –±–æ—Ç —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Ä–∞–∑–Ω—ã–µ —á–∏—Ç—ã, —Ä–ø,–∫—Ñ–≥, –∏ –≤—Å–µ —á—Ç–æ –Ω–∞–¥–æ –¥–ª—è —Ç–µ–±—è\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_main_keyboard()
    )

# –ö–æ–º–∞–Ω–¥–∞ /addlink
async def add_link(update: Update, context):
    args = context.args
    if len(args) < 2:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ: /addlink <URL> <–æ–ø–∏—Å–∞–Ω–∏–µ>")
        return

    url = args[0]
    description = " ".join(args[1:])

    if not (url.startswith("http://") or url.startswith("https://")):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://)")
        return

    try:
        with open(LINKS_FILE, "r") as f:
            data = json.load(f)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ links.json: %s", e)
        data = {}

    if "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" not in data:
        data["–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"] = []
    data["–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"].append({"url": url, "description": description})

    with open(LINKS_FILE, "w") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)
    logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: %s - %s", description, url)

    context.user_data['menu_state'] = 'main'  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    await update.message.reply_text(f"–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {description} ({url})", reply_markup=get_main_keyboard())

# –ö–æ–º–∞–Ω–¥–∞ /addlinkcategory
async def add_link_category(update: Update, context):
    args = context.args
    if len(args) < 3:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —Å—Å—ã–ª–∫—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ: /addlinkcategory <–∫–∞—Ç–µ–≥–æ—Ä–∏—è> <URL> <–æ–ø–∏—Å–∞–Ω–∏–µ>")
        return

    category = args[0]
    url = args[1]
    description = " ".join(args[2:])

    if not (url.startswith("http://") or url.startswith("https://")):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://)")
        return

    try:
        with open(LINKS_FILE, "r") as f:
            data = json.load(f)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ links.json: %s", e)
        data = {}

    if category not in data:
        data[category] = []
    data[category].append({"url": url, "description": description})

    with open(LINKS_FILE, "w") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)
    logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é %s: %s - %s", category, description, url)

    context.user_data['menu_state'] = 'main'  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    await update.message.reply_text(
        f"–°—Å—ã–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}: {description} ({url})",
        reply_markup=get_main_keyboard()
    )

# –ö–æ–º–∞–Ω–¥–∞ /getlinks
async def get_links(update: Update, context):
    try:
        with open(LINKS_FILE, "r") as f:
            data = json.load(f)
        
        if not data:
            await update.message.reply_text("–°—Å—ã–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å –ø–æ–º–æ—â—å—é /addlink –∏–ª–∏ /addlinkcategory.")
            return

        response = "–°–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
        for category, links in data.items():
            response += f"\n{category}:\n"
            for i, link in enumerate(links, 1):
                response += f"  {i}. {link['description']}: {link['url']}\n"
        
        context.user_data['menu_state'] = 'main'  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        await update.message.reply_text(response, reply_markup=get_main_keyboard())
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫: %s", e)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def handle_buttons(update: Update, context):
    text = update.message.text
    try:
        with open(LINKS_FILE, "r") as f:
            data = json.load(f)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ links.json: %s", e)
        data = {}

    if text == "üòÅ –ü–û–î–î–ï–†–ñ–ö–ê":
        context.user_data['menu_state'] = 'main'
        await update.message.reply_text("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @Kapriz002")
    elif text == "üë®‚Äçüíª –î–ê–õ–¨–®–ï":
        context.user_data['menu_state'] = 'cheats'
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", reply_markup=get_cheats_keyboard())
    elif text == "–∞–Ω—Å–æ—Ñ—Ç":
        context.user_data['menu_state'] = 'unsoft'
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –ø–∞–∫", reply_markup=get_unsoft_keyboard())
    elif text == "—Å–æ—Ñ—Ç":
        context.user_data['menu_state'] = 'software'
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", reply_markup=get_software_keyboard())
    elif text == "—Ä–µ—Å—É—Ä—Å –ø–∞–∫–∏":
        context.user_data['menu_state'] = 'resource_packs'
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –ø–∞–∫", reply_markup=get_resource_packs_keyboard())
    elif text == "Imba RP":
        context.user_data['menu_state'] = 'resource_packs'
        await update.message.reply_text(
            "Imba RP: https://drive.google.com/uc?export=download&id=10JS9wnawD0A2ZUxd78x1VqukQqZUCtE2\n"
            "–ü–∞—Ä–æ–ª—å –æ—Ç –∞—Ä—Ö–∏–≤–∞: 123",
            reply_markup=get_resource_packs_keyboard()
        )
    elif text == "Minecraft java":
        context.user_data['menu_state'] = 'minecraft_java'
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ", reply_markup=get_minecraft_java_keyboard())
    elif text == "Minecraft bedrock":
        context.user_data['menu_state'] = 'software'
        await update.message.reply_text(
            "Minecraft Bedrock: https://tooldroid-poggers.neocities.org/",
            reply_markup=get_software_keyboard()
        )
    elif text == "—á–∏—Ç":
        context.user_data['menu_state'] = 'cheat_version'
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é", reply_markup=get_cheat_version_keyboard())
    elif text == "1.16.5":
        context.user_data['menu_state'] = 'cheat_selection'
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Ç", reply_markup=get_cheat_selection_keyboard())
    elif text == "Wexside":
        context.user_data['menu_state'] = 'cheat_selection'
        await update.message.reply_text(
            "Wexside: https://workupload.com/file/9St57j4Jqn6\n–ü–∞—Ä–æ–ª—å –æ—Ç –∞—Ä—Ö–∏–≤–∞: 123",
            reply_markup=get_cheat_selection_keyboard()
        )
    elif text == "britvafarm":
        context.user_data['menu_state'] = 'cheat_selection'
        await update.message.reply_text(
            "britvafarm: https://workupload.com/file/E9dZkBkNHJL",
            reply_markup=get_cheat_selection_keyboard()
        )
    elif text == "dimasikclient":
        context.user_data['menu_state'] = 'cheat_selection'
        await update.message.reply_text(
            "dimasikclient: https://workupload.com/file/VtTKTYQgzLR",
            reply_markup=get_cheat_selection_keyboard()
        )
    elif text == "Delta Crack":
        context.user_data['menu_state'] = 'cheat_selection'
        await update.message.reply_text(
            "Delta Crack: https://drive.google.com/uc?export=download&id=1zCVaGxIOht9vEt3QbVNLPOMygVMWIdOE\n–ü–∞—Ä–æ–ª—å –æ—Ç –∞—Ä—Ö–∏–≤–∞: 123",
            reply_markup=get_cheat_selection_keyboard()
        )
    elif text == "Nursultan crack":
        context.user_data['menu_state'] = 'cheat_selection'
        await update.message.reply_text(
            "Nursultan crack: https://drive.google.com/open?id=1Zo7ozkhhpCRUFtFek4sVFj1YV_is2C_q&usp=drive_copy",
            reply_markup=get_cheat_selection_keyboard()
        )
    elif text == "Haruka(loader)":
        context.user_data['menu_state'] = 'cheat_selection'
        await update.message.reply_text(
            "Haruka(loader): https://drive.google.com/open?id=1laKZlzuGsfdTKuEFJ-D1lq2iaGJ8xByi&usp=drive_copy",
            reply_markup=get_cheat_selection_keyboard()
        )
    elif text == "rocstar free":
        context.user_data['menu_state'] = 'cheat_selection'
        await update.message.reply_text(
            "rocstar free: https://drive.google.com/open?id=16PRyvkjfIUB_5SEA1ffH5gM1hYSKW5Jp&usp=drive_copy",
            reply_markup=get_cheat_selection_keyboard()
        )
    elif text == "–Ω–∞–∑–∞–¥":
        current_state = context.user_data.get('menu_state', 'main')
        if current_state == 'cheats':
            context.user_data['menu_state'] = 'main'
            await update.message.reply_text("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        elif current_state == 'software':
            context.user_data['menu_state'] = 'cheats'
            await update.message.reply_text("–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.", reply_markup=get_cheats_keyboard())
        elif current_state == 'unsoft':
            context.user_data['menu_state'] = 'cheats'
            await update.message.reply_text("–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.", reply_markup=get_cheats_keyboard())
        elif current_state == 'resource_packs':
            context.user_data['menu_state'] = 'unsoft'
            await update.message.reply_text("–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.", reply_markup=get_unsoft_keyboard())
        elif current_state == 'minecraft_java':
            context.user_data['menu_state'] = 'software'
            await update.message.reply_text("–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.", reply_markup=get_software_keyboard())
        elif current_state == 'cheat_version':
            context.user_data['menu_state'] = 'minecraft_java'
            await update.message.reply_text("–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.", reply_markup=get_minecraft_java_keyboard())
        elif current_state == 'cheat_selection':
            context.user_data['menu_state'] = 'cheat_version'
            await update.message.reply_text("–í–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.", reply_markup=get_cheat_version_keyboard())
        else:
            context.user_data['menu_state'] = 'main'
            await update.message.reply_text("–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
    else:
        context.user_data['menu_state'] = 'main'
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
async def unknown(update: Update, context):
    context.user_data['menu_state'] = 'main'
    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.", reply_markup=get_main_keyboard())

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    try:
        application = Application.builder().token(TOKEN).build()
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: %s", e)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("addlink", add_link))
    application.add_handler(CommandHandler("addlinkcategory", add_link_category))
    application.add_handler(CommandHandler("getlinks", get_links))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
    application.add_handler(MessageHandler(filters.COMMAND, unknown))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        application.run_polling()
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: %s", e)

if __name__ == "__main__":
    main()